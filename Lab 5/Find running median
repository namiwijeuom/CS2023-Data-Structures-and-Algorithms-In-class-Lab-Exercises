#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

void quicksort(vector<int>& arr, int left, int right);
int partition(vector<int>& arr, int left, int right, int pivotIndex);
void printArray(vector<int>& arr, int size);
double findMedian(vector<int>& arr);

int main()
{
    vector<int> arr;
    int n;

    cout << "Enter the size of the array: "; //Enter the no of elements in the array
    cin >> n;

    cout << "Enter the array elements: "; //Enter the elements seperated by spaces
    for (int i = 0; i < n; i++) {
        int x;
        cin >> x;
        arr.push_back(x);

        quicksort(arr, 0, i); // sort the array so far
        cout << "Sorted array so far: ";
        printArray(arr, i+1); // print the sorted array so far

        double median = findMedian(arr); // find the running median
        cout << "Running median: " << median << endl;
    }

    return 0;
}

//Quick sort implementataion
void quicksort(vector<int>& arr, int left, int right)
{
    if (left < right) {
        int pivotIndex = left + (right - left) / 2;
        int pivotNewIndex = partition(arr, left, right, pivotIndex);
        quicksort(arr, left, pivotNewIndex - 1);
        quicksort(arr, pivotNewIndex + 1, right);
    }
}

int partition(vector<int>& arr, int left, int right, int pivotIndex)
{
    int pivotValue = arr[pivotIndex];
    swap(arr[pivotIndex], arr[right]); // Move pivot to end
    int storeIndex = left;
    for (int i = left; i < right; i++) {
        if (arr[i] < pivotValue) {
            swap(arr[i], arr[storeIndex]);
            storeIndex++;
        }
    }
    swap(arr[storeIndex], arr[right]); // Move pivot to its final place
    return storeIndex;
}

//Displaying the array
void printArray(vector<int>& arr, int size)
{
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

//Finding the median of the sorted array 
double findMedian(vector<int>& arr)
{
    int n = arr.size();
    if (n % 2 == 0) {
        return (double)(arr[n / 2 - 1] + arr[n / 2]) / 2.0;
    }
    else {
        return (double)arr[n / 2];
    }
}
