#include <iostream>
#include <chrono>
#include <random>
#include <stack>
using namespace std;

void swap(int* a, int* b) {
    int t = *a;
    *a = *b;
    *b = t;
}

int partition(int arr[], int low, int high) {
    int pivot = arr[high]; //Pivot element
    int i = (low - 1);

    for (int j = low; j <= high - 1; j++) {
        if (arr[j] <= pivot) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

void quicksort(int arr[], int low, int high) {
    stack<int> stk;

    stk.push(low);
    stk.push(high);

    while (!stk.empty()) {
        int h = stk.top();
        stk.pop();
        int l = stk.top();
        stk.pop();

        int p = partition(arr, l, h);

        if (p - 1 > l) {
            stk.push(l);
            stk.push(p - 1);
        }

        if (p + 1 < h) {
            stk.push(p + 1);
            stk.push(h);
        }
    }
}

int main() {
    const int arr_size = 200000; //Change the number of elements in the array
    int arr[arr_size];

    // Generate random array
    random_device rd;
    mt19937 gen(rd());
    uniform_int_distribution<> dis(1, 1000);

    for (int i = 0; i < arr_size; i++) {
        arr[i] = dis(gen);
    }

    // Sort array and measure execution time
    auto start_time = chrono::high_resolution_clock::now();
    quicksort(arr, 0, arr_size - 1);
    auto end_time = chrono::high_resolution_clock::now();

    auto duration = chrono::duration_cast<chrono::milliseconds>(end_time - start_time).count();
    cout << "Execution time: " << duration << " ms" << endl;

    return 0;
}
